/*
MIT License

Copyright (c) 2020 PriceRunner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/* 
 * Merchant API
 *
 * Endpoints for getting information regarding merchants.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Model
{
    /// <summary>
    /// Contains (offerName, merchantName, merchantSku, price, shippingCost, stockStatus)
    /// </summary>
    [DataContract]
    public partial class OfferV1 :  IEquatable<OfferV1>, IValidatableObject
    {
        /// <summary>
        /// Origin of the merchant in regards to the site&#39;s country
        /// </summary>
        /// <value>Origin of the merchant in regards to the site&#39;s country</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MerchantOriginEnum
        {
            
            /// <summary>
            /// Enum NATIONAL for value: NATIONAL
            /// </summary>
            [EnumMember(Value = "NATIONAL")]
            NATIONAL = 1,
            
            /// <summary>
            /// Enum INTERNATIONAL for value: INTERNATIONAL
            /// </summary>
            [EnumMember(Value = "INTERNATIONAL")]
            INTERNATIONAL = 2
        }

        /// <summary>
        /// Origin of the merchant in regards to the site&#39;s country
        /// </summary>
        /// <value>Origin of the merchant in regards to the site&#39;s country</value>
        [DataMember(Name="merchantOrigin", EmitDefaultValue=false)]
        public MerchantOriginEnum? MerchantOrigin { get; set; }
        /// <summary>
        /// Stock status of the offer
        /// </summary>
        /// <value>Stock status of the offer</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StockStatusEnum
        {
            
            /// <summary>
            /// Enum INSTOCK for value: IN_STOCK
            /// </summary>
            [EnumMember(Value = "IN_STOCK")]
            INSTOCK = 1,
            
            /// <summary>
            /// Enum OUTOFSTOCK for value: OUT_OF_STOCK
            /// </summary>
            [EnumMember(Value = "OUT_OF_STOCK")]
            OUTOFSTOCK = 2,
            
            /// <summary>
            /// Enum PREORDER for value: PREORDER
            /// </summary>
            [EnumMember(Value = "PREORDER")]
            PREORDER = 3,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 4,
            
            /// <summary>
            /// Enum SPECIALORDER for value: SPECIAL_ORDER
            /// </summary>
            [EnumMember(Value = "SPECIAL_ORDER")]
            SPECIALORDER = 5
        }

        /// <summary>
        /// Stock status of the offer
        /// </summary>
        /// <value>Stock status of the offer</value>
        [DataMember(Name="stockStatus", EmitDefaultValue=false)]
        public StockStatusEnum? StockStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferV1" /> class.
        /// </summary>
        /// <param name="deliveryTime">Delivery time.</param>
        /// <param name="gtin14">GTIN14 codes on the offer matched to a product, optional.</param>
        /// <param name="international">International.</param>
        /// <param name="merchantId">Id of the merchant having the offer.</param>
        /// <param name="merchantName">Name of the merchant having the offer.</param>
        /// <param name="merchantOrigin">Origin of the merchant in regards to the site&#39;s country.</param>
        /// <param name="merchantSku">Unique merchant SKU on the offer, optional.</param>
        /// <param name="offerName">Name of the offer.</param>
        /// <param name="price">Price on the offer.</param>
        /// <param name="shippingCost">Shipping cost on the offer if exists.</param>
        /// <param name="stockStatus">Stock status of the offer.</param>
        public OfferV1(DeliveryTimeV1 deliveryTime = default(DeliveryTimeV1), string gtin14 = default(string), bool? international = default(bool?), int? merchantId = default(int?), string merchantName = default(string), MerchantOriginEnum? merchantOrigin = default(MerchantOriginEnum?), string merchantSku = default(string), string offerName = default(string), PriceV1 price = default(PriceV1), PriceV1 shippingCost = default(PriceV1), StockStatusEnum? stockStatus = default(StockStatusEnum?))
        {
            this.DeliveryTime = deliveryTime;
            this.Gtin14 = gtin14;
            this.International = international;
            this.MerchantId = merchantId;
            this.MerchantName = merchantName;
            this.MerchantOrigin = merchantOrigin;
            this.MerchantSku = merchantSku;
            this.OfferName = offerName;
            this.Price = price;
            this.ShippingCost = shippingCost;
            this.StockStatus = stockStatus;
        }
        
        /// <summary>
        /// Delivery time
        /// </summary>
        /// <value>Delivery time</value>
        [DataMember(Name="deliveryTime", EmitDefaultValue=false)]
        public DeliveryTimeV1 DeliveryTime { get; set; }

        /// <summary>
        /// GTIN14 codes on the offer matched to a product, optional
        /// </summary>
        /// <value>GTIN14 codes on the offer matched to a product, optional</value>
        [DataMember(Name="gtin14", EmitDefaultValue=false)]
        public string Gtin14 { get; set; }

        /// <summary>
        /// International
        /// </summary>
        /// <value>International</value>
        [DataMember(Name="international", EmitDefaultValue=false)]
        public bool? International { get; set; }

        /// <summary>
        /// Id of the merchant having the offer
        /// </summary>
        /// <value>Id of the merchant having the offer</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public int? MerchantId { get; set; }

        /// <summary>
        /// Name of the merchant having the offer
        /// </summary>
        /// <value>Name of the merchant having the offer</value>
        [DataMember(Name="merchantName", EmitDefaultValue=false)]
        public string MerchantName { get; set; }


        /// <summary>
        /// Unique merchant SKU on the offer, optional
        /// </summary>
        /// <value>Unique merchant SKU on the offer, optional</value>
        [DataMember(Name="merchantSku", EmitDefaultValue=false)]
        public string MerchantSku { get; set; }

        /// <summary>
        /// Name of the offer
        /// </summary>
        /// <value>Name of the offer</value>
        [DataMember(Name="offerName", EmitDefaultValue=false)]
        public string OfferName { get; set; }

        /// <summary>
        /// Price on the offer
        /// </summary>
        /// <value>Price on the offer</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public PriceV1 Price { get; set; }

        /// <summary>
        /// Shipping cost on the offer if exists
        /// </summary>
        /// <value>Shipping cost on the offer if exists</value>
        [DataMember(Name="shippingCost", EmitDefaultValue=false)]
        public PriceV1 ShippingCost { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferV1 {\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  Gtin14: ").Append(Gtin14).Append("\n");
            sb.Append("  International: ").Append(International).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  MerchantOrigin: ").Append(MerchantOrigin).Append("\n");
            sb.Append("  MerchantSku: ").Append(MerchantSku).Append("\n");
            sb.Append("  OfferName: ").Append(OfferName).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  StockStatus: ").Append(StockStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferV1);
        }

        /// <summary>
        /// Returns true if OfferV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferV1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryTime == input.DeliveryTime ||
                    (this.DeliveryTime != null &&
                    this.DeliveryTime.Equals(input.DeliveryTime))
                ) && 
                (
                    this.Gtin14 == input.Gtin14 ||
                    (this.Gtin14 != null &&
                    this.Gtin14.Equals(input.Gtin14))
                ) && 
                (
                    this.International == input.International ||
                    (this.International != null &&
                    this.International.Equals(input.International))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.MerchantOrigin == input.MerchantOrigin ||
                    (this.MerchantOrigin != null &&
                    this.MerchantOrigin.Equals(input.MerchantOrigin))
                ) && 
                (
                    this.MerchantSku == input.MerchantSku ||
                    (this.MerchantSku != null &&
                    this.MerchantSku.Equals(input.MerchantSku))
                ) && 
                (
                    this.OfferName == input.OfferName ||
                    (this.OfferName != null &&
                    this.OfferName.Equals(input.OfferName))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.ShippingCost == input.ShippingCost ||
                    (this.ShippingCost != null &&
                    this.ShippingCost.Equals(input.ShippingCost))
                ) && 
                (
                    this.StockStatus == input.StockStatus ||
                    (this.StockStatus != null &&
                    this.StockStatus.Equals(input.StockStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryTime != null)
                    hashCode = hashCode * 59 + this.DeliveryTime.GetHashCode();
                if (this.Gtin14 != null)
                    hashCode = hashCode * 59 + this.Gtin14.GetHashCode();
                if (this.International != null)
                    hashCode = hashCode * 59 + this.International.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantName != null)
                    hashCode = hashCode * 59 + this.MerchantName.GetHashCode();
                if (this.MerchantOrigin != null)
                    hashCode = hashCode * 59 + this.MerchantOrigin.GetHashCode();
                if (this.MerchantSku != null)
                    hashCode = hashCode * 59 + this.MerchantSku.GetHashCode();
                if (this.OfferName != null)
                    hashCode = hashCode * 59 + this.OfferName.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.ShippingCost != null)
                    hashCode = hashCode * 59 + this.ShippingCost.GetHashCode();
                if (this.StockStatus != null)
                    hashCode = hashCode * 59 + this.StockStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
