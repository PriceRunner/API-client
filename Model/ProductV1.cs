/*
MIT License

Copyright (c) 2020 PriceRunner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/* 
 * Merchant API
 *
 * Endpoints for getting information regarding merchants.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Model
{
    /// <summary>
    /// Contains (id, name, categoryId, productPage)
    /// </summary>
    [DataContract]
    public partial class ProductV1 :  IEquatable<ProductV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductV1" /> class.
        /// </summary>
        /// <param name="categoryId">Id of the category in which the product lies.</param>
        /// <param name="categoryName">Id of the category in which the product lies.</param>
        /// <param name="gtin14s">GTIN14 codes on this product.</param>
        /// <param name="id">Id of the product.</param>
        /// <param name="name">Name of the product.</param>
        /// <param name="productPage">Link to pricerunner product page.</param>
        public ProductV1(int? categoryId = default(int?), string categoryName = default(string), List<string> gtin14s = default(List<string>), long? id = default(long?), string name = default(string), string productPage = default(string))
        {
            this.CategoryId = categoryId;
            this.CategoryName = categoryName;
            this.Gtin14s = gtin14s;
            this.Id = id;
            this.Name = name;
            this.ProductPage = productPage;
        }
        
        /// <summary>
        /// Id of the category in which the product lies
        /// </summary>
        /// <value>Id of the category in which the product lies</value>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// Id of the category in which the product lies
        /// </summary>
        /// <value>Id of the category in which the product lies</value>
        [DataMember(Name="categoryName", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// GTIN14 codes on this product
        /// </summary>
        /// <value>GTIN14 codes on this product</value>
        [DataMember(Name="gtin14s", EmitDefaultValue=false)]
        public List<string> Gtin14s { get; set; }

        /// <summary>
        /// Id of the product
        /// </summary>
        /// <value>Id of the product</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Name of the product
        /// </summary>
        /// <value>Name of the product</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Link to pricerunner product page
        /// </summary>
        /// <value>Link to pricerunner product page</value>
        [DataMember(Name="productPage", EmitDefaultValue=false)]
        public string ProductPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductV1 {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  Gtin14s: ").Append(Gtin14s).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductPage: ").Append(ProductPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductV1);
        }

        /// <summary>
        /// Returns true if ProductV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductV1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.Gtin14s == input.Gtin14s ||
                    this.Gtin14s != null &&
                    this.Gtin14s.SequenceEqual(input.Gtin14s)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProductPage == input.ProductPage ||
                    (this.ProductPage != null &&
                    this.ProductPage.Equals(input.ProductPage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                if (this.Gtin14s != null)
                    hashCode = hashCode * 59 + this.Gtin14s.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProductPage != null)
                    hashCode = hashCode * 59 + this.ProductPage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
